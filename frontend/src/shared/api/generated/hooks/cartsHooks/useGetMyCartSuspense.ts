/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '../../../client'
import type { RequestConfig, ResponseErrorConfig } from '../../../client'
import type { QueryKey, QueryClient, UseSuspenseQueryOptions, UseSuspenseQueryResult } from '@tanstack/react-query'
import type { GetMyCartQueryResponse } from '../../types/cartsTypes/GetMyCart'
import { queryOptions, useSuspenseQuery } from '@tanstack/react-query'

export const getMyCartSuspenseQueryKey = () => [{ url: '/api/v1/carts/me' }] as const

export type GetMyCartSuspenseQueryKey = ReturnType<typeof getMyCartSuspenseQueryKey>

/**
 * @description Get current user's active cart.
 * @summary Get My Cart
 * {@link /api/v1/carts/me}
 */
export async function getMyCartSuspense(config: Partial<RequestConfig> & { client?: typeof client } = {}) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<GetMyCartQueryResponse, ResponseErrorConfig<Error>, unknown>({ method: 'GET', url: `/api/v1/carts/me`, ...requestConfig })
  return res.data
}

export function getMyCartSuspenseQueryOptions(config: Partial<RequestConfig> & { client?: typeof client } = {}) {
  const queryKey = getMyCartSuspenseQueryKey()
  return queryOptions<GetMyCartQueryResponse, ResponseErrorConfig<Error>, GetMyCartQueryResponse, typeof queryKey>({
    queryKey,
    queryFn: async ({ signal }) => {
      config.signal = signal
      return getMyCartSuspense(config)
    },
  })
}

/**
 * @description Get current user's active cart.
 * @summary Get My Cart
 * {@link /api/v1/carts/me}
 */
export function useGetMyCartSuspense<TData = GetMyCartQueryResponse, TQueryKey extends QueryKey = GetMyCartSuspenseQueryKey>(
  options: {
    query?: Partial<UseSuspenseQueryOptions<GetMyCartQueryResponse, ResponseErrorConfig<Error>, TData, TQueryKey>> & { client?: QueryClient }
    client?: Partial<RequestConfig> & { client?: typeof client }
  } = {},
) {
  const { query: { client: queryClient, ...queryOptions } = {}, client: config = {} } = options ?? {}
  const queryKey = queryOptions?.queryKey ?? getMyCartSuspenseQueryKey()

  const query = useSuspenseQuery(
    {
      ...(getMyCartSuspenseQueryOptions(config) as unknown as UseSuspenseQueryOptions),
      queryKey,
      ...(queryOptions as unknown as Omit<UseSuspenseQueryOptions, 'queryKey'>),
    },
    queryClient,
  ) as UseSuspenseQueryResult<TData, ResponseErrorConfig<Error>> & { queryKey: TQueryKey }

  query.queryKey = queryKey as TQueryKey

  return query
}