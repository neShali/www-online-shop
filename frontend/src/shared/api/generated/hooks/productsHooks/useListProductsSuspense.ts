/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '../../../client'
import type { RequestConfig, ResponseErrorConfig } from '../../../client'
import type { QueryKey, QueryClient, UseSuspenseQueryOptions, UseSuspenseQueryResult } from '@tanstack/react-query'
import type { ListProductsQueryResponse, ListProductsQueryParams, ListProducts422 } from '../../types/productsTypes/ListProducts'
import { queryOptions, useSuspenseQuery } from '@tanstack/react-query'

export const listProductsSuspenseQueryKey = (params?: ListProductsQueryParams) => [{ url: '/api/v1/products/' }, ...(params ? [params] : [])] as const

export type ListProductsSuspenseQueryKey = ReturnType<typeof listProductsSuspenseQueryKey>

/**
 * @description Retrieve products with filtering and pagination.
 * @summary List Products
 * {@link /api/v1/products/}
 */
export async function listProductsSuspense(params?: ListProductsQueryParams, config: Partial<RequestConfig> & { client?: typeof client } = {}) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<ListProductsQueryResponse, ResponseErrorConfig<ListProducts422>, unknown>({
    method: 'GET',
    url: `/api/v1/products/`,
    params,
    ...requestConfig,
  })
  return res.data
}

export function listProductsSuspenseQueryOptions(params?: ListProductsQueryParams, config: Partial<RequestConfig> & { client?: typeof client } = {}) {
  const queryKey = listProductsSuspenseQueryKey(params)
  return queryOptions<ListProductsQueryResponse, ResponseErrorConfig<ListProducts422>, ListProductsQueryResponse, typeof queryKey>({
    queryKey,
    queryFn: async ({ signal }) => {
      config.signal = signal
      return listProductsSuspense(params, config)
    },
  })
}

/**
 * @description Retrieve products with filtering and pagination.
 * @summary List Products
 * {@link /api/v1/products/}
 */
export function useListProductsSuspense<TData = ListProductsQueryResponse, TQueryKey extends QueryKey = ListProductsSuspenseQueryKey>(
  params?: ListProductsQueryParams,
  options: {
    query?: Partial<UseSuspenseQueryOptions<ListProductsQueryResponse, ResponseErrorConfig<ListProducts422>, TData, TQueryKey>> & { client?: QueryClient }
    client?: Partial<RequestConfig> & { client?: typeof client }
  } = {},
) {
  const { query: { client: queryClient, ...queryOptions } = {}, client: config = {} } = options ?? {}
  const queryKey = queryOptions?.queryKey ?? listProductsSuspenseQueryKey(params)

  const query = useSuspenseQuery(
    {
      ...(listProductsSuspenseQueryOptions(params, config) as unknown as UseSuspenseQueryOptions),
      queryKey,
      ...(queryOptions as unknown as Omit<UseSuspenseQueryOptions, 'queryKey'>),
    },
    queryClient,
  ) as UseSuspenseQueryResult<TData, ResponseErrorConfig<ListProducts422>> & { queryKey: TQueryKey }

  query.queryKey = queryKey as TQueryKey

  return query
}