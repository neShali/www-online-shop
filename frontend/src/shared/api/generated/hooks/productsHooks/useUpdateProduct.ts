/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '../../../client'
import type { RequestConfig, ResponseErrorConfig } from '../../../client'
import type { UseMutationOptions, QueryClient } from '@tanstack/react-query'
import type {
  UpdateProductMutationRequest,
  UpdateProductMutationResponse,
  UpdateProductPathParams,
  UpdateProduct422,
} from '../../types/productsTypes/UpdateProduct'
import { useMutation } from '@tanstack/react-query'

export const updateProductMutationKey = () => [{ url: '/api/v1/products/{product_id}' }] as const

export type UpdateProductMutationKey = ReturnType<typeof updateProductMutationKey>

/**
 * @description Update a product (admin only).
 * @summary Update Product
 * {@link /api/v1/products/:product_id}
 */
export async function updateProduct(
  { product_id }: { product_id: UpdateProductPathParams['product_id'] },
  data?: UpdateProductMutationRequest,
  config: Partial<RequestConfig<UpdateProductMutationRequest>> & { client?: typeof client } = {},
) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<UpdateProductMutationResponse, ResponseErrorConfig<UpdateProduct422>, UpdateProductMutationRequest>({
    method: 'PUT',
    url: `/api/v1/products/${product_id}`,
    data,
    ...requestConfig,
  })
  return res.data
}

/**
 * @description Update a product (admin only).
 * @summary Update Product
 * {@link /api/v1/products/:product_id}
 */
export function useUpdateProduct<TContext>(
  options: {
    mutation?: UseMutationOptions<
      UpdateProductMutationResponse,
      ResponseErrorConfig<UpdateProduct422>,
      { product_id: UpdateProductPathParams['product_id']; data?: UpdateProductMutationRequest },
      TContext
    > & { client?: QueryClient }
    client?: Partial<RequestConfig<UpdateProductMutationRequest>> & { client?: typeof client }
  } = {},
) {
  const { mutation = {}, client: config = {} } = options ?? {}
  const { client: queryClient, ...mutationOptions } = mutation
  const mutationKey = mutationOptions.mutationKey ?? updateProductMutationKey()

  return useMutation<
    UpdateProductMutationResponse,
    ResponseErrorConfig<UpdateProduct422>,
    { product_id: UpdateProductPathParams['product_id']; data?: UpdateProductMutationRequest },
    TContext
  >(
    {
      mutationFn: async ({ product_id, data }) => {
        return updateProduct({ product_id }, data, config)
      },
      mutationKey,
      ...mutationOptions,
    },
    queryClient,
  )
}