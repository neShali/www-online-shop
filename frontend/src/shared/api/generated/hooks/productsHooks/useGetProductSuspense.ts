/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '../../../client'
import type { RequestConfig, ResponseErrorConfig } from '../../../client'
import type { QueryKey, QueryClient, UseSuspenseQueryOptions, UseSuspenseQueryResult } from '@tanstack/react-query'
import type { GetProductQueryResponse, GetProductPathParams, GetProduct422 } from '../../types/productsTypes/GetProduct'
import { queryOptions, useSuspenseQuery } from '@tanstack/react-query'

export const getProductSuspenseQueryKey = ({ product_id }: { product_id: GetProductPathParams['product_id'] }) =>
  [{ url: '/api/v1/products/:product_id', params: { product_id: product_id } }] as const

export type GetProductSuspenseQueryKey = ReturnType<typeof getProductSuspenseQueryKey>

/**
 * @description Get product by ID.
 * @summary Get Product
 * {@link /api/v1/products/:product_id}
 */
export async function getProductSuspense(
  { product_id }: { product_id: GetProductPathParams['product_id'] },
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<GetProductQueryResponse, ResponseErrorConfig<GetProduct422>, unknown>({
    method: 'GET',
    url: `/api/v1/products/${product_id}`,
    ...requestConfig,
  })
  return res.data
}

export function getProductSuspenseQueryOptions(
  { product_id }: { product_id: GetProductPathParams['product_id'] },
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  const queryKey = getProductSuspenseQueryKey({ product_id })
  return queryOptions<GetProductQueryResponse, ResponseErrorConfig<GetProduct422>, GetProductQueryResponse, typeof queryKey>({
    enabled: !!product_id,
    queryKey,
    queryFn: async ({ signal }) => {
      config.signal = signal
      return getProductSuspense({ product_id }, config)
    },
  })
}

/**
 * @description Get product by ID.
 * @summary Get Product
 * {@link /api/v1/products/:product_id}
 */
export function useGetProductSuspense<TData = GetProductQueryResponse, TQueryKey extends QueryKey = GetProductSuspenseQueryKey>(
  { product_id }: { product_id: GetProductPathParams['product_id'] },
  options: {
    query?: Partial<UseSuspenseQueryOptions<GetProductQueryResponse, ResponseErrorConfig<GetProduct422>, TData, TQueryKey>> & { client?: QueryClient }
    client?: Partial<RequestConfig> & { client?: typeof client }
  } = {},
) {
  const { query: { client: queryClient, ...queryOptions } = {}, client: config = {} } = options ?? {}
  const queryKey = queryOptions?.queryKey ?? getProductSuspenseQueryKey({ product_id })

  const query = useSuspenseQuery(
    {
      ...(getProductSuspenseQueryOptions({ product_id }, config) as unknown as UseSuspenseQueryOptions),
      queryKey,
      ...(queryOptions as unknown as Omit<UseSuspenseQueryOptions, 'queryKey'>),
    },
    queryClient,
  ) as UseSuspenseQueryResult<TData, ResponseErrorConfig<GetProduct422>> & { queryKey: TQueryKey }

  query.queryKey = queryKey as TQueryKey

  return query
}