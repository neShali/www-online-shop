/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '../../../client'
import type { RequestConfig, ResponseErrorConfig } from '../../../client'
import type { QueryKey, QueryClient, QueryObserverOptions, UseQueryResult } from '@tanstack/react-query'
import type {
  ListProductReviewsQueryResponse,
  ListProductReviewsPathParams,
  ListProductReviewsQueryParams,
  ListProductReviews422,
} from '../../types/reviewsTypes/ListProductReviews'
import { queryOptions, useQuery } from '@tanstack/react-query'

export const listProductReviewsQueryKey = (
  { product_id }: { product_id: ListProductReviewsPathParams['product_id'] },
  params?: ListProductReviewsQueryParams,
) => [{ url: '/api/v1/reviews/product/:product_id', params: { product_id: product_id } }, ...(params ? [params] : [])] as const

export type ListProductReviewsQueryKey = ReturnType<typeof listProductReviewsQueryKey>

/**
 * @description Retrieve reviews for a product.
 * @summary List Product Reviews
 * {@link /api/v1/reviews/product/:product_id}
 */
export async function listProductReviews(
  { product_id }: { product_id: ListProductReviewsPathParams['product_id'] },
  params?: ListProductReviewsQueryParams,
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<ListProductReviewsQueryResponse, ResponseErrorConfig<ListProductReviews422>, unknown>({
    method: 'GET',
    url: `/api/v1/reviews/product/${product_id}`,
    params,
    ...requestConfig,
  })
  return res.data
}

export function listProductReviewsQueryOptions(
  { product_id }: { product_id: ListProductReviewsPathParams['product_id'] },
  params?: ListProductReviewsQueryParams,
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  const queryKey = listProductReviewsQueryKey({ product_id }, params)
  return queryOptions<ListProductReviewsQueryResponse, ResponseErrorConfig<ListProductReviews422>, ListProductReviewsQueryResponse, typeof queryKey>({
    enabled: !!product_id,
    queryKey,
    queryFn: async ({ signal }) => {
      config.signal = signal
      return listProductReviews({ product_id }, params, config)
    },
  })
}

/**
 * @description Retrieve reviews for a product.
 * @summary List Product Reviews
 * {@link /api/v1/reviews/product/:product_id}
 */
export function useListProductReviews<
  TData = ListProductReviewsQueryResponse,
  TQueryData = ListProductReviewsQueryResponse,
  TQueryKey extends QueryKey = ListProductReviewsQueryKey,
>(
  { product_id }: { product_id: ListProductReviewsPathParams['product_id'] },
  params?: ListProductReviewsQueryParams,
  options: {
    query?: Partial<QueryObserverOptions<ListProductReviewsQueryResponse, ResponseErrorConfig<ListProductReviews422>, TData, TQueryData, TQueryKey>> & {
      client?: QueryClient
    }
    client?: Partial<RequestConfig> & { client?: typeof client }
  } = {},
) {
  const { query: { client: queryClient, ...queryOptions } = {}, client: config = {} } = options ?? {}
  const queryKey = queryOptions?.queryKey ?? listProductReviewsQueryKey({ product_id }, params)

  const query = useQuery(
    {
      ...(listProductReviewsQueryOptions({ product_id }, params, config) as unknown as QueryObserverOptions),
      queryKey,
      ...(queryOptions as unknown as Omit<QueryObserverOptions, 'queryKey'>),
    },
    queryClient,
  ) as UseQueryResult<TData, ResponseErrorConfig<ListProductReviews422>> & { queryKey: TQueryKey }

  query.queryKey = queryKey as TQueryKey

  return query
}