/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '../../../client'
import type { RequestConfig, ResponseErrorConfig } from '../../../client'
import type { UseMutationOptions, QueryClient } from '@tanstack/react-query'
import type { DeleteReviewMutationResponse, DeleteReviewPathParams, DeleteReview422 } from '../../types/reviewsTypes/DeleteReview'
import { useMutation } from '@tanstack/react-query'

export const deleteReviewMutationKey = () => [{ url: '/api/v1/reviews/{review_id}' }] as const

export type DeleteReviewMutationKey = ReturnType<typeof deleteReviewMutationKey>

/**
 * @description Delete a review.
 * @summary Delete Review
 * {@link /api/v1/reviews/:review_id}
 */
export async function deleteReview(
  { review_id }: { review_id: DeleteReviewPathParams['review_id'] },
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<DeleteReviewMutationResponse, ResponseErrorConfig<DeleteReview422>, unknown>({
    method: 'DELETE',
    url: `/api/v1/reviews/${review_id}`,
    ...requestConfig,
  })
  return res.data
}

/**
 * @description Delete a review.
 * @summary Delete Review
 * {@link /api/v1/reviews/:review_id}
 */
export function useDeleteReview<TContext>(
  options: {
    mutation?: UseMutationOptions<
      DeleteReviewMutationResponse,
      ResponseErrorConfig<DeleteReview422>,
      { review_id: DeleteReviewPathParams['review_id'] },
      TContext
    > & { client?: QueryClient }
    client?: Partial<RequestConfig> & { client?: typeof client }
  } = {},
) {
  const { mutation = {}, client: config = {} } = options ?? {}
  const { client: queryClient, ...mutationOptions } = mutation
  const mutationKey = mutationOptions.mutationKey ?? deleteReviewMutationKey()

  return useMutation<DeleteReviewMutationResponse, ResponseErrorConfig<DeleteReview422>, { review_id: DeleteReviewPathParams['review_id'] }, TContext>(
    {
      mutationFn: async ({ review_id }) => {
        return deleteReview({ review_id }, config)
      },
      mutationKey,
      ...mutationOptions,
    },
    queryClient,
  )
}