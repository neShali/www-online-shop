/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '../../../client'
import type { RequestConfig, ResponseErrorConfig } from '../../../client'
import type { QueryKey, QueryClient, UseSuspenseQueryOptions, UseSuspenseQueryResult } from '@tanstack/react-query'
import type { ListPromosQueryResponse, ListPromosQueryParams, ListPromos422 } from '../../types/promosTypes/ListPromos'
import { queryOptions, useSuspenseQuery } from '@tanstack/react-query'

export const listPromosSuspenseQueryKey = (params?: ListPromosQueryParams) => [{ url: '/api/v1/promos/' }, ...(params ? [params] : [])] as const

export type ListPromosSuspenseQueryKey = ReturnType<typeof listPromosSuspenseQueryKey>

/**
 * @description List all promos (admin only).
 * @summary List Promos
 * {@link /api/v1/promos/}
 */
export async function listPromosSuspense(params?: ListPromosQueryParams, config: Partial<RequestConfig> & { client?: typeof client } = {}) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<ListPromosQueryResponse, ResponseErrorConfig<ListPromos422>, unknown>({
    method: 'GET',
    url: `/api/v1/promos/`,
    params,
    ...requestConfig,
  })
  return res.data
}

export function listPromosSuspenseQueryOptions(params?: ListPromosQueryParams, config: Partial<RequestConfig> & { client?: typeof client } = {}) {
  const queryKey = listPromosSuspenseQueryKey(params)
  return queryOptions<ListPromosQueryResponse, ResponseErrorConfig<ListPromos422>, ListPromosQueryResponse, typeof queryKey>({
    queryKey,
    queryFn: async ({ signal }) => {
      config.signal = signal
      return listPromosSuspense(params, config)
    },
  })
}

/**
 * @description List all promos (admin only).
 * @summary List Promos
 * {@link /api/v1/promos/}
 */
export function useListPromosSuspense<TData = ListPromosQueryResponse, TQueryKey extends QueryKey = ListPromosSuspenseQueryKey>(
  params?: ListPromosQueryParams,
  options: {
    query?: Partial<UseSuspenseQueryOptions<ListPromosQueryResponse, ResponseErrorConfig<ListPromos422>, TData, TQueryKey>> & { client?: QueryClient }
    client?: Partial<RequestConfig> & { client?: typeof client }
  } = {},
) {
  const { query: { client: queryClient, ...queryOptions } = {}, client: config = {} } = options ?? {}
  const queryKey = queryOptions?.queryKey ?? listPromosSuspenseQueryKey(params)

  const query = useSuspenseQuery(
    {
      ...(listPromosSuspenseQueryOptions(params, config) as unknown as UseSuspenseQueryOptions),
      queryKey,
      ...(queryOptions as unknown as Omit<UseSuspenseQueryOptions, 'queryKey'>),
    },
    queryClient,
  ) as UseSuspenseQueryResult<TData, ResponseErrorConfig<ListPromos422>> & { queryKey: TQueryKey }

  query.queryKey = queryKey as TQueryKey

  return query
}