/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '../../../client'
import type { RequestConfig, ResponseErrorConfig } from '../../../client'
import type { QueryKey, QueryClient, QueryObserverOptions, UseQueryResult } from '@tanstack/react-query'
import type { GetPromoProductsQueryResponse, GetPromoProductsPathParams, GetPromoProducts422 } from '../../types/promosTypes/GetPromoProducts'
import { queryOptions, useQuery } from '@tanstack/react-query'

export const getPromoProductsQueryKey = ({ promo_id }: { promo_id: GetPromoProductsPathParams['promo_id'] }) =>
  [{ url: '/api/v1/promos/:promo_id/products', params: { promo_id: promo_id } }] as const

export type GetPromoProductsQueryKey = ReturnType<typeof getPromoProductsQueryKey>

/**
 * @description Get all products associated with a promo (admin only).
 * @summary Get Promo Products
 * {@link /api/v1/promos/:promo_id/products}
 */
export async function getPromoProducts(
  { promo_id }: { promo_id: GetPromoProductsPathParams['promo_id'] },
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<GetPromoProductsQueryResponse, ResponseErrorConfig<GetPromoProducts422>, unknown>({
    method: 'GET',
    url: `/api/v1/promos/${promo_id}/products`,
    ...requestConfig,
  })
  return res.data
}

export function getPromoProductsQueryOptions(
  { promo_id }: { promo_id: GetPromoProductsPathParams['promo_id'] },
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  const queryKey = getPromoProductsQueryKey({ promo_id })
  return queryOptions<GetPromoProductsQueryResponse, ResponseErrorConfig<GetPromoProducts422>, GetPromoProductsQueryResponse, typeof queryKey>({
    enabled: !!promo_id,
    queryKey,
    queryFn: async ({ signal }) => {
      config.signal = signal
      return getPromoProducts({ promo_id }, config)
    },
  })
}

/**
 * @description Get all products associated with a promo (admin only).
 * @summary Get Promo Products
 * {@link /api/v1/promos/:promo_id/products}
 */
export function useGetPromoProducts<
  TData = GetPromoProductsQueryResponse,
  TQueryData = GetPromoProductsQueryResponse,
  TQueryKey extends QueryKey = GetPromoProductsQueryKey,
>(
  { promo_id }: { promo_id: GetPromoProductsPathParams['promo_id'] },
  options: {
    query?: Partial<QueryObserverOptions<GetPromoProductsQueryResponse, ResponseErrorConfig<GetPromoProducts422>, TData, TQueryData, TQueryKey>> & {
      client?: QueryClient
    }
    client?: Partial<RequestConfig> & { client?: typeof client }
  } = {},
) {
  const { query: { client: queryClient, ...queryOptions } = {}, client: config = {} } = options ?? {}
  const queryKey = queryOptions?.queryKey ?? getPromoProductsQueryKey({ promo_id })

  const query = useQuery(
    {
      ...(getPromoProductsQueryOptions({ promo_id }, config) as unknown as QueryObserverOptions),
      queryKey,
      ...(queryOptions as unknown as Omit<QueryObserverOptions, 'queryKey'>),
    },
    queryClient,
  ) as UseQueryResult<TData, ResponseErrorConfig<GetPromoProducts422>> & { queryKey: TQueryKey }

  query.queryKey = queryKey as TQueryKey

  return query
}