/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '../../../client'
import type { RequestConfig, ResponseErrorConfig } from '../../../client'
import type { QueryKey, QueryClient, QueryObserverOptions, UseQueryResult } from '@tanstack/react-query'
import type { ListActivePromosQueryResponse } from '../../types/promosTypes/ListActivePromos'
import { queryOptions, useQuery } from '@tanstack/react-query'

export const listActivePromosQueryKey = () => [{ url: '/api/v1/promos/active' }] as const

export type ListActivePromosQueryKey = ReturnType<typeof listActivePromosQueryKey>

/**
 * @description List all currently active promos (public).
 * @summary List Active Promos
 * {@link /api/v1/promos/active}
 */
export async function listActivePromos(config: Partial<RequestConfig> & { client?: typeof client } = {}) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<ListActivePromosQueryResponse, ResponseErrorConfig<Error>, unknown>({
    method: 'GET',
    url: `/api/v1/promos/active`,
    ...requestConfig,
  })
  return res.data
}

export function listActivePromosQueryOptions(config: Partial<RequestConfig> & { client?: typeof client } = {}) {
  const queryKey = listActivePromosQueryKey()
  return queryOptions<ListActivePromosQueryResponse, ResponseErrorConfig<Error>, ListActivePromosQueryResponse, typeof queryKey>({
    queryKey,
    queryFn: async ({ signal }) => {
      config.signal = signal
      return listActivePromos(config)
    },
  })
}

/**
 * @description List all currently active promos (public).
 * @summary List Active Promos
 * {@link /api/v1/promos/active}
 */
export function useListActivePromos<
  TData = ListActivePromosQueryResponse,
  TQueryData = ListActivePromosQueryResponse,
  TQueryKey extends QueryKey = ListActivePromosQueryKey,
>(
  options: {
    query?: Partial<QueryObserverOptions<ListActivePromosQueryResponse, ResponseErrorConfig<Error>, TData, TQueryData, TQueryKey>> & { client?: QueryClient }
    client?: Partial<RequestConfig> & { client?: typeof client }
  } = {},
) {
  const { query: { client: queryClient, ...queryOptions } = {}, client: config = {} } = options ?? {}
  const queryKey = queryOptions?.queryKey ?? listActivePromosQueryKey()

  const query = useQuery(
    {
      ...(listActivePromosQueryOptions(config) as unknown as QueryObserverOptions),
      queryKey,
      ...(queryOptions as unknown as Omit<QueryObserverOptions, 'queryKey'>),
    },
    queryClient,
  ) as UseQueryResult<TData, ResponseErrorConfig<Error>> & { queryKey: TQueryKey }

  query.queryKey = queryKey as TQueryKey

  return query
}